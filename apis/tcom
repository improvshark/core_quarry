local listenProtocol = 'quarry'


function syncRequest(qName)
	message = {messageType= 'joinRequest', quarryName = qName}

	received = nil

	parallel.waitForAll(
		function()
			sync.broadcast(message,tostring(message), listenProtocol)
		end,
		function()
			repeat
				received = sync.listen(qName)
				print('messagetype '.. received.message.messageType)
			until received.message.messageType == 'joinReply'

			print ('recieved a reply from sync request')
			received = received.message.list

		end
	)

	return received
end

function joinReplyB(listArg, protocol)
	message = {list = listArg, messageType= 'joinReply'}
	sync.broadcast(message,tostring(message), protocol)
end

function syncB(listArg, protocol)
	message = {list = listArg, messageType= 'sync'}
	sync.broadcast(message,tostring(message), protocol)
end


function requestRunner(protocol, reqType)
	-- sending request
	message = {messageType='runnerRequest', myPos = pos.getPosition(), requestType = reqType}
	sync.broadcast(message,tostring(message),protocol)

	-- collection responses
	response = {}

	parallel.waitForAny(function() sleep(3) end,
		function()
			while true do

				mes = sync.listenB(protocol)
				if mes.message.messageType == 'runnerReply' then
					print('got runner response')
					table.insert(response, mes)
				end
			end
		end
	)

	-- picking a runner
	runner = 1

	for i = 1, #response do
		a = response[runner].message.distance
		b = response[i].message.distance
		if b < a then
			runner = i
		end
	end

	if #response == 0 then
		print('no response')
		sleep(1)
		return nil
	end

	-- calling the runner
	print('calling the runner')
	sleep(.1)
	callRunnerMes = { messageType = 'runnerComeHere', runnerId = response[runner].senderId, myPos = pos.getPosition(), requestType = reqType }
	sync.broadcast(callRunnerMes,tostring(callRunnerMes),protocol)
	return response[runner].senderId
end
