local protocol = {universal="quarry",quarryName=nil,sync=nil,requestFuel=nil,doneFuel=nil,requestChest=nil,doneChest=nil}

local function setProtos(nameOfQuarry)
	protocol.quarryName = nameOfQuarry
	protocol.sync = nameOfQuarry .. "_sync"
	protocol.requestFuel = nameOfQuarry .. "_requestFuel"
	protocol.doneFuel = nameOfQuarry .. "_doneFuel"
	protocol.requestChest = nameOfQuarry .. "_requestChest"
	protocol.doneChest = nameOfQuarry .. "_doneChest"
end

local configDir = core.coreDir() .. '/modules/quarry/files/config'
local config = core.loadConfig(configDir)
if config == nil then
	config = {unit = 'none', list=sync.create()}
	core.saveConfig(configDir,config)
end

local function empty(id)
	print('emptying')
	for i = 1, 16 do
		turtle.select(i)
		turtle.dropUp()
	end
	turtle.select(1)

end

local function refuel(id)
	print('refueling')
	turtle.select(1)
	turtle.drop()
	turtle.suckUp()
	turtle.refuel()

end

local fullHandler = function()

	repeat
		print('sending full request')
		runner = tcom.requestRunner(protocol.requestChest,'full')
	until runner ~= nil

	print('woot')

	parallel.waitForAny(function()
		done = false
		while not done do
			print('listen for begin em')
			message = sync.listen(protocol.requestChest)
			print( 'gotsomething')
			if message.message.messageType == 'beginEmptying' then
				empty(runner)
				done = true
				message = {messageType = 'doneEmptying'}
				sync.send(tonumber(runner), message, tostring(message), protocol.doneChest)
			end
		end
	end)
end

local fuelHandler = function()

	repeat
		print('sending fuel request')
		runner = tcom.requestRunner(protocol.requestFuel,'fuel')
	until runner ~= nil


	parallel.waitForAny(function()
		done = false
		while not done do
			print('listen for begin em')
			message = sync.listen(protocol.requestFuel)
			print( 'gotsomething')
			if message.message.messageType == 'beginFueling' then
				refuel(runner)
				done = true
				message = {messageType = 'doneFueling'}
				sync.send(tonumber(runner), message, tostring(message), protocol.doneFuel)
			end
		end
	end)

end



pos.handle.full = fullHandler
pos.handle.fuelPause = fuelHandler

local function saveList()
	core.saveConfig(configDir,config)
end

local function enoughFuel(dim)
	fuelLevel = turtle.getFuelLevel()
	if tonumber(fuelLevel) and fuelLevel >= (dim.x*dim.y*dim.z) + 400 then
		return true
	elseif not tonumber(fuelLevel) then
		return true
	end
	return false
end

local function startJob()
	jobList = sync.getAll(config.list)
	for i = 1, #jobList do
		if jobList[i].value.status == 'started' and jobList[i].value.id ==  os.getComputerID() or jobList[i].value.status == 'notStarted' then

			value = jobList[i].value
			value.id = os.getComputerID()
			value.turtle = os.getComputerLabel()
			value.status = 'started'
			sync.set(config.list,jobList[i].name,value)
			saveList()
			tcom.syncB(config.list, protocol.sync)

			-- check fuel here
			if not enoughFuel(jobList[i].value.holeSize) then
				fuelHandler()
			end



			nav.gotoX(jobList[i].value.startCoord.coord.x,true)
			nav.gotoZ(jobList[i].value.startCoord.coord.z,true)
			nav.gotoY(jobList[i].value.startCoord.coord.y,true)
			nav.turn(jobList[i].value.startCoord.direction)
			currentPos = pos.getPosition()


			pos.handle.full = fullHandler
			pos.handle.fuelPause = fuelHandler

			shell.run('ex', jobList[i].value.holeSize.x,jobList[i].value.holeSize.y,jobList[i].value.holeSize.z)
			-- check fuel here
			currentPos.coord.y = currentPos.coord.y +1
			nav.gotoY(currentPos.coord.y, true)

			value = jobList[i].value
			value.status = 'done'
			sync.set(config.list,jobList[i].name,value)
			saveList()
			tcom.syncB(config.list, protocol.sync)

			return true
		end
	end
	return false
end

local function miningLoop()
	while startJob() do end
end

local function syncLoop()
	while true do
		message = sync.listenB(protocol.sync)

		if message.message.messageType == 'sync' then
			print('syncing ' .. tostring(message.message.list))
			a = message.message.list

			config.list = sync.sync(a,config.list)
			saveList()
		end
	end
end

function listenLoop()
	while true do
		message = sync.listen(protocol.universal)

		if message.message.messageType == 'joinRequest' then
			print('got a joinRequest')
			if message.message.quarryName == protocol.quarryName then
				sleep(1)
				print('broadcasting join reply')
				tcom.joinReplyB(config.list, protocol.quarryName)
			end
		elseif message.messageType == 'list' then
		elseif message.messageType == 'status' then
		end
	end
end


local function begin()
	config.startPos = pos.getPosition()
	core.saveConfig(configDir,config)
	core.addBoot("quarry join "..protocol.quarryName .. " resume")
	parallel.waitForAny(syncLoop, listenLoop, miningLoop)
	nav.gotoPos(config.startPos, true)
	core.removeBoot("quarry join "..protocol.quarryName .. " resume")
end

local arg = {...}

local function main()

	if arg[1] == 'start' and arg[2] ~= nil then
		print('starting '.. arg[2].. ' quarry')
		setProtos(arg[2])

		begin()

	elseif arg[1] == 'join' and arg[2] ~= nil and arg[3] == "resume" then
		print('resuming '.. arg[2])
		setProtos(arg[2])

		parallel.waitForAny(syncLoop, listenLoop, miningLoop)
		nav.gotoPos(config.startPos, true)
		core.removeBoot("quarry join "..protocol.quarryName .. " resume")
		fs.rm(configDir)
	elseif arg[1] == 'join' and arg[2] ~= nil then
			print('joining '.. arg[2])
			setProtos(arg[2])

			config.list = tcom.syncRequest(arg[2])
			saveList()

			begin()


	end

end

main()
