
local proto = nil
local runnerProto = nil
local runnerProtoDone = nil
local listenProtocol = 'quarry'
local configDir = core.coreDir() .. '/modules/quarry/files/config'
local config = configman.load(configDir)
if config == nil then
	config = {unit = 'none', list=sync.create()}
	configman.save(configDir,config)
end

local function empty(id)
	print('emptying')
	for i = 1, 16 do
		turtle.select(i)
		turtle.dropUp()
	end
	turtle.select(1)
	
end

local function refuel(id)
	print('refueling')
	turtle.select(1)
	turtle.drop()
	turtle.suckUp()
	turtle.refuel()
	
end

local fullHandler = function() 
	
	repeat
		print('sending full request')
		runner = tcom.requestRunner(runnerProto,'full')
	until runner ~= nil

	print('woot')

	parallel.waitForAny(function()
		done = false
		while not done do
			print('listen for begin em')
			message = sync.listen(runnerProto)
			print( 'gotsomething')
			if message.message.messageType == 'beginEmptying' then
				empty(runner)
				done = true
				message = {messageType = 'doneEmptying'}
				sync.send(tonumber(runner), message, tostring(message), runnerProtoDone)
			end
		end
	end)
end

local fuelHandler = function() 
	
	repeat
		print('sending fuel request')
		runner = tcom.requestRunner(runnerProto,'fuel')
	until runner ~= nil


	parallel.waitForAny(function()
		done = false
		while not done do
			print('listen for begin em')
			message = sync.listen(runnerProto)
			print( 'gotsomething')
			if message.message.messageType == 'beginFueling' then
				refuel(runner)
				done = true
				message = {messageType = 'doneFueling'}
				sync.send(tonumber(runner), message, tostring(message), runnerProtoDone)
			end
		end
	end)

end

turtleHandler = function(side, agressive)
		
		if side == 'front' then  
			pos.up(1,agressive)
			pos.forward(2,agressive)
			pos.down(1,agressive)
		elseif side == 'top' then 
			pos.forward(1,agressive)
			pos.up(2,agressive)
			pos.back(1,agressive)
		elseif side == 'bottom' then 
			pos.forward(1,agressive)
			pos.down(2,agressive)
			pos.back(1,agressive)
		end
end

pos.handle.turtle = turtleHandler
pos.handle.full = fullHandler
pos.handle.fuelPause = fuelHandler

local function saveList()
	configman.save(configDir,config)
end

local function enoughFuel(dim)
	fuelLevel = turtle.getFuelLevel()
	if fuelLevel >= (dim.x*dim.y*dim.z) + 400 then
		return true
	end
	return false
end

local function startJob()
	jobList = sync.getAll(config.list)
	for i = 1, #jobList do
		if jobList[i].value.status == 'notStarted' then
			
			value = jobList[i].value
			value.status = 'started'
			sync.set(config.list,jobList[i].name,value)
			saveList()
			tcom.syncB(config.list, proto)
			
			-- check fuel here
			if not enoughFuel(jobList[i].value.holeSize) then
				fuelHandler()
			end


			
			nav.gotoX(jobList[i].value.startCoord.coord.x,true)
			nav.gotoZ(jobList[i].value.startCoord.coord.z,true)
			nav.gotoY(jobList[i].value.startCoord.coord.y,true)
			nav.turn(jobList[i].value.startCoord.direction)
			currentPos = pos.getPosition()


			pos.handle.full = fullHandler
			pos.handle.fuelPause = fuelHandler

			shell.run('ex', jobList[i].value.holeSize.x,jobList[i].value.holeSize.y,jobList[i].value.holeSize.z)
			-- check fuel here
			currentPos.coord.y = currentPos.coord.y +1
			nav.gotoPos(currentPos, true)
			
			value = jobList[i].value
			value.status = 'done'
			sync.set(config.list,jobList[i].name,value)
			saveList()
			tcom.syncB(config.list, proto)
			
			return true
		end
	end
	return false
end

local function miningLoop()
	while startJob() do end
end

local function syncLoop()
	while true do
		message = sync.listenB(proto)
		
		if message.message.messageType == 'sync' then
			print('syncing ' .. tostring(message.message.list))
			a = message.message.list

			config.list = sync.sync(a,config.list)
		end
	end
end

function listenLoop()
	while true do
		message = sync.listen(listenProtocol)

		if message.message.messageType == 'syncRequest' then
			print('got a syncRequest')
			if message.message.quarryName == proto then
				sleep(1)
				print('broadcasting sync')
				tcom.syncB(config.list, proto)
				tcom.syncB(config.list, proto)
			end
		elseif message.messageType == 'list' then
		elseif message.messageType == 'status' then
		end
	end
end


local arg = {...}

local function main()

	if arg[1] == 'start' and arg[2] ~= nil then
		print('starting '.. arg[2].. ' quarry')
		proto= arg[2]
		runnerProto = proto.."runner"
		runnerProtoDone = runnerProto ..'Done'
		local startPos = pos.getPosition()
		parallel.waitForAny(syncLoop, listenLoop, miningLoop)
		nav.gotoPos(startPos, true)

	elseif arg[1] == 'join' and arg[2] ~= nil then
		print('joining '.. arg[2])
		proto= arg[2]
		runnerProto = proto.."runner"
		runnerProtoDone = runnerProto ..'Done'

		parallel.waitForAny(function()

		config.list = tcom.syncRequest(arg[2])
		saveList()

		end,syncLoop)
		


		local startPos = pos.getPosition()
		parallel.waitForAny(syncLoop, listenLoop, miningLoop)
		nav.gotoPos(startPos, true)
	
	end

end

main()