local fuelSlot = 1
local dumpSlot = 2
local emptySlot = 3
local waitTime = 1000
-- if waitTime happens we must be done? go home


local protocol = {universal="quarry",quarryName=nil,sync=nil,requestFuel=nil,doneFuel=nil,requestChest=nil,doneChest=nil}
local startPos = pos.getPosition()
local queue = {}

local function setProtos(nameOfQuarry)
	protocol.quarryName = nameOfQuarry
	protocol.sync = nameOfQuarry .. "_sync"
	protocol.requestFuel = nameOfQuarry .. "_requestFuel"
	protocol.doneFuel = nameOfQuarry .. "_doneFuel"
	protocol.requestChest = nameOfQuarry .. "_requestChest"
	protocol.doneChest = nameOfQuarry .. "_doneChest"
end

local startPos = pos.getPosition()
local queue = {}

local handle= {}
handle.fuelPause = function()

	turtle.digUp()
	turtle.select(fuelSlot)
	turtle.placeUp()
	turtle.select(emptySlot)
	turtle.drop()
	turtle.suckUp()
	turtle.refuel()
	turtle.select(fuelSlot)
	turtle.digUp()
end

pos.handle.fuelPause = handle.fuel

local function calcDistance(otherPos)
	c = pos.getPosition().coord - otherPos.coord
	d = c.x + c.y + c.z
	d = d/3
	return math.abs(d)
end

local function chestRunnerLoop()
	while true do
		message = sync.listenB(protocol.requestChest)
		if message.message.messageType == 'runnerRequest' and message.message.requestType == "full" then
			print('got a request from ' .. tostring(message.senderId))
			reply = {messageType = 'runnerReply', distance = calcDistance(message.message.myPos), busy = #queue }
			sync.broadcast(reply,tostring(reply),protocol.requestChest)
		elseif message.message.messageType == 'runnerComeHere' and message.message.runnerId == os.getComputerID() then
			print('adding to queue')
			table.insert(queue, message)
		end
	end
end

local function fuelRunnerLoop()
	while true do
		message = sync.listenB(protocol.requestFuel)

		if message.message.messageType == 'runnerRequest' and message.message.requestType == "fuel" then
			print('got a request from ' .. tostring(message.senderId))
			reply = {messageType = 'runnerReply', distance = calcDistance(message.message.myPos), busy = #queue }
			sync.broadcast(reply,tostring(reply),protocol.requestFuel)
		elseif message.message.messageType == 'runnerComeHere' and message.message.runnerId == os.getComputerID() then
			print('adding to queue')
			table.insert(queue, message)
		end
	end
end

function listenLoop()
	while true do
		message = sync.listen(protocol.universal)

		if message.message.messageType == 'syncRequest' then
		elseif message.messageType == 'list' then
		elseif message.messageType == 'status' then
		end
	end
end

local function handleRequest(req)
	startPosition = pos.getPosition()

	reqId = tonumber(req.senderId)
	reqPos = req.message.myPos
	reqPos.coord.y = reqPos.coord.y + 2
	reqType = req.message.requestType

	nav.gotoPos(reqPos, true)

	if reqType == "full" then
		turtle.select(dumpSlot)
		turtle.placeDown()
		message = {messageType = 'beginEmptying'}
		sync.send(reqId, message, tostring(message), protocol.requestChest)


	elseif reqType == 'fuel' then
		turtle.select(fuelSlot)
		turtle.placeDown()
		message = {messageType = 'beginFueling'}
		sync.send(reqId, message, tostring(message), protocol.requestFuel)

	end

	parallel.waitForAny(function()
		repeat
			print('listening for response')
		until sync.listen(protocol.doneFuel).message.messageType == 'doneFueling'
	end,function()
		repeat
			print('listening for response')
		until sync.listen(protocol.doneChest).message.messageType == 'doneEmptying'
	end, function() sleep(100) end)

	turtle.digDown()
	nav.gotoY(startPosition.coord.y,true)
	print('finished with request')

end

local function handleLoop()
	while true do
		if #queue > 0 then
			print('handling request')
			handleRequest(queue[1])
			table.remove(queue,1)
		end
		sleep(1)
	end
end



local arg = {...}

local function main()

	if arg[1] == 'start' and arg[2] ~= nil then

	elseif arg[1] == 'join' and arg[2] ~= nil then
		print('joining '.. arg[2])
		setProtos(arg[2])
		parallel.waitForAny(fuelRunnerLoop, chestRunnerLoop, listenLoop, handleLoop)

	end

end

main()
