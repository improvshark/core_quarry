

local configDir = core.coreDir() .. '/modules/quarry/files/config'


local config = configman.load(configDir)
if config == nil then
	config = {unit = 'none', list={}}
	configman.save(configDir,config)
end


local function createJob(t, holeSizeArg,coordArg)
	job =  {holeSize = holeSizeArg, startCoord = coordArg, status = 'notStarted', percent = 0 }
	sync.set(t,tostring(job),job)
end

local function generateCoords(holeSizeArg, startCoordArg, endCoordArg)
	jobs = sync.create()
	print('sc '.. startCoordArg.x..' '..startCoordArg.y.." "..startCoordArg.z)
	print('ec '.. endCoordArg.x..' '..endCoordArg.y.." "..endCoordArg.z)

	width = math.abs(startCoordArg.x - endCoordArg.x) + 1
	depth = math.abs(startCoordArg.y - endCoordArg.y) + 1
	length = math.abs(startCoordArg.z - endCoordArg.z) + 1

	for i = 0, math.ceil(length/holeSizeArg.z)-1  do

		for j = 0, math.ceil(width/holeSizeArg.x)-1 do



			if startCoordArg.x >= endCoordArg.x then
				if startCoordArg.z >= endCoordArg.z then
					x = startCoordArg.x - (holeSizeArg.x*j)
					z = startCoordArg.z - (holeSizeArg.z*i)
					f=1
				else
					x = startCoordArg.x - (holeSizeArg.x*j)
					z = startCoordArg.z + (holeSizeArg.z*i)
					f=0
				end
			else
				if startCoordArg.z >=endCoordArg.z then
					x = startCoordArg.x + (holeSizeArg.x*j)
					z = startCoordArg.z - (holeSizeArg.z*i)
					f=2
				else
					x = startCoordArg.x + (holeSizeArg.x*j)
					z = startCoordArg.z + (holeSizeArg.z*i)
					f=3
				end
			end

			hx = math.min(holeSizeArg.x,width - holeSizeArg.x*j)
			hz = math.min(holeSizeArg.z,length - holeSizeArg.z*i )

			hs = vector.new( hx, depth,hz )
			createJob(jobs,hs,{direction = f, coord = vector.new(x,startCoordArg.y,z) })
			print(i..j ..": "..x.." "..startCoordArg.y.." "..z.." "..f)
			--print("   ".. hs.x.." "..hs.y.." "..hs.z)

		end
	end
	return jobs
end

local function getNumber(s)
	term.write('\t\t'..s..':')
	input = io.read()
	while tonumber(input) == nil do
		term.write("bad input? try again " .. s..":")
		input = io.read()
	end
	return input
end
local function getHoleSize()
	coord = vector.new(0, 0, 0)
	coord.x = getNumber('Width')
	coord.z = getNumber('Length')
	return coord
end

local function getCoord()
	coord = vector.new(0, 0, 0)
	coord.x = getNumber('x')
	coord.y = getNumber('y')
	coord.z = getNumber('z')
	return coord
end

local function join(name)
	if config.unit == 'miner' or config.unit == 'runner' then
		shell.run(config.unit,'join', name)
	else
		print('must set unit type')
	end
end

local function start(name)
	if config.unit == 'miner' or config.unit == 'runner' then
		shell.run(config.unit,'start', name)
	else
		print('must set unit type')
	end
end

local arg = {...}


local function main()



	if arg[1] == 'start' and arg[2] ~= nil
	 and tonumber(arg[3]) ~= nil and tonumber(arg[4]) ~= nil
	 and tonumber(arg[5]) ~= nil and tonumber(arg[6]) ~= nil and tonumber(arg[7]) ~= nil
	 and tonumber(arg[8]) ~= nil and tonumber(arg[9]) ~= nil and tonumber(arg[10]) ~= nil then

	 	holeSize = vector.new(tonumber(arg[3]),0,tonumber(arg[4]))
	 	startCoord = vector.new(tonumber(arg[5]),tonumber(arg[6]),tonumber(arg[7]))
	 	endCoord = vector.new(tonumber(arg[8]),tonumber(arg[9]),tonumber(arg[10]))
		config.list = generateCoords(holeSize,startCoord,endCoord)
		configman.save(configDir,config)
		start(arg[2])


	elseif arg[1] == 'start' and arg[2] ~= nil then
		print('holeSize?')
		holeSize = getHoleSize()
		print('start Coordinate ?')
		startCoord = getCoord()
		print('end Coordinate ?')
		endCoord = getCoord()

		list = generateCoords(holeSize,startCoord,endCoord)
		configman.save(configDir,config)
		join(arg[2])

	elseif arg[1] == 'stop' and arg[2] ~= nil then
	elseif arg[1] == 'pause' and arg[2] ~= nil then
	elseif arg[1] == 'status' and arg[2] ~= nil then
	elseif arg[1] == 'add' and arg[2] ~= nil then

	elseif arg[1] == 'join' and arg[2] ~= nil then
		join(arg[2])
	elseif arg[1] == 'set' and arg[2] == 'miner' then
		config.unit = 'miner'
		configman.save(configDir,config)
	elseif arg[1] == 'set' and arg[2] == 'runner' then
		config.unit = 'runner'
		configman.save(configDir,config)
	elseif arg[1] == 'set' and arg[2] == 'none' then
		config.unit = 'none'
		configman.save(configDir,config)
	else
		print('unknown command')
	end
end




local function turtleHandler(side, agressive)

		numb = math.random(1, 2)

		if numb == 1 then
			sleep(math.random(2, 5))
		else
			if side == 'front' then
				if math.random(1, 2) == 1 then pos.up(1,agressive) pos.forward(2,agressive) pos.down(1,agressive)
 				else pos.down(1,agressive) pos.forward(2,agressive) pos.down(1,agressive) end
			elseif side == 'top' then
				if math.random(1, 2) == 1 then pos.forward(1,agressive) pos.up(2,agressive) pos.back(1,agressive)
				else pos.back(1,agressive) pos.up(2,agressive) pos.forward(1,agressive) end
			elseif side == 'bottom' then
				if math.random(1, 2) == 1 then pos.forward(1,agressive) pos.down(2,agressive) pos.back(1,agressive)
				else pos.back(1,agressive) pos.down(2,agressive) pos.forward(1,agressive) end
			end
		end
end

turtleWrapper = function (side,agressive)
	count=1
	while detectTurtle(side) do
		turtleHandler(side, agressive, count)
		count= count+1
	end
end

pos.ignore={"EnderStorage:enderChest","ComputerCraft:CC-Turtle","ComputerCraft:CC-TurtleExpanded"}
pos.handle.turtle = turtleHandler
main()
pos.resetHandlers()
